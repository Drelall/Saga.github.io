import GoogleDriveStorage from './google-drive-storage.js';

// Instance du gestionnaire de stockage
const storage = new GoogleDriveStorage();

// Variables globales
let rpList = [];

console.log('üì¶ Renderer charg√©');

// Sauvegarder les donn√©es
async function saveData() {
    try {
        console.log('üíæ Tentative sauvegarde...', rpList.length, 'RPs');
        await storage.saveData(rpList);
        console.log('‚úÖ Sauvegarde r√©ussie');
    } catch (error) {
        console.error('‚ùå Erreur sauvegarde:', error);
        throw error;
    }
}

// Charger les donn√©es
async function loadData() {
    try {
        console.log('üì• Tentative chargement...');
        rpList = await storage.loadData();
        console.log('‚úÖ Chargement r√©ussi:', rpList.length, 'RPs');
    } catch (error) {
        console.error('‚ùå Erreur chargement:', error);
        rpList = [];
    }
}

// Afficher notification
function showNotification(message, type = 'success') {
    console.log(`üîî Notification ${type}:`, message);
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        z-index: 1000;
        ${type === 'success' ? 'background-color: #4CAF50;' : 'background-color: #f44336;'}
    `;
    
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

// Obtenir RPs actifs
function getActiveRPs() {
    return rpList.filter(rp => rp.turn !== 'RP termin√©' && rp.turn !== 'RP abandonn√©');
}

// Calculer temps √©coul√©
function getTimeDisplay(date) {
    if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
        return { timeStr: 'Date invalide', className: 'time-normal' };
    }
    
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    let timeStr = '';
    let className = 'time-normal';
    
    if (diffDays > 0) {
        timeStr = `Il y a ${diffDays} jour${diffDays > 1 ? 's' : ''}`;
        if (diffDays >= 7) className = 'time-urgent';
        else if (diffDays >= 3) className = 'time-warning';
    } else if (diffHours > 0) {
        timeStr = `Il y a ${diffHours} heure${diffHours > 1 ? 's' : ''}`;
    } else if (diffMinutes > 0) {
        timeStr = `Il y a ${diffMinutes} minute${diffMinutes > 1 ? 's' : ''}`;
    } else {
        timeStr = '√Ä l\'instant';
    }
    
    return { timeStr, className };
}

// Cr√©er carte RP
function createCard(item) {
    const { timeStr, className } = getTimeDisplay(item.date);
    
    let statusClass = '';
    let statusText = '';
    
    switch(item.turn) {
        case "√Ä ton partenaire de poster":
            statusClass = 'turn-partner';
            statusText = 'En attente de votre partenaire';
            break;
        case "√Ä toi de poster":
            statusClass = 'turn-you';
            statusText = '√Ä vous de poster';
            break;
        case "RP termin√©":
            statusClass = 'turn-completed';
            statusText = 'RP termin√©';
            break;
        case "RP abandonn√©":
            statusClass = 'turn-abandoned';
            statusText = 'RP abandonn√©';
            break;
    }

    const card = document.createElement('div');
    card.className = 'rp-card';
    card.dataset.id = item.id;
    card.innerHTML = `
        <div class="card-header ${statusClass}">
            <div class="card-title-container">
                <h3 class="card-title">${item.rp}</h3>
            </div>
            <div class="card-status ${statusClass}">
                <span>${statusText}</span>
            </div>
        </div>
        
        <div class="card-body">
            <div class="card-info">
                <div class="info-item">
                    <span class="info-label">Partenaire</span>
                    <span class="info-value">${item.partner}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Lieu</span>
                    <span class="info-value">${item.location || 'Non sp√©cifi√©'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Type</span>
                    <span class="info-value">${item.type || 'Non sp√©cifi√©'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Univers</span>
                    <span class="info-value">${item.universe || 'Non sp√©cifi√©'}</span>
                </div>
            </div>
            
            <div class="card-time">
                <span class="time-icon">üïò</span>
                <span class="time-text ${className}">${timeStr}</span>
            </div>
            
            <div class="card-actions">
                <button class="btn btn-secondary btn-sm edit-btn" data-id="${item.id}">
                    ‚úèÔ∏è Modifier
                </button>
                <button class="btn btn-danger btn-sm delete-btn" data-id="${item.id}">
                    üóëÔ∏è Supprimer
                </button>
            </div>
        </div>
    `;
    
    return card;
}

// Mettre √† jour affichage cartes
function updateActiveCards() {
    console.log('üîÑ Mise √† jour cartes actives...');
    
    const cardsView = document.getElementById('cards-view');
    const cardsEmptyState = document.getElementById('cards-empty-state');
    
    if (!cardsView) {
        console.error('‚ùå √âl√©ment cards-view non trouv√©');
        return;
    }
    
    cardsView.innerHTML = '';
    const activeRPs = getActiveRPs();
    
    console.log('üìä RPs actifs:', activeRPs.length);
    
    if (activeRPs.length === 0) {
        cardsView.style.display = 'none';
        if (cardsEmptyState) {
            cardsEmptyState.style.display = 'block';
        }
        return;
    }
    
    cardsView.style.display = 'grid';
    if (cardsEmptyState) {
        cardsEmptyState.style.display = 'none';
    }
    
    // Cr√©er cartes
    activeRPs.forEach((item) => {
        const card = createCard(item);
        cardsView.appendChild(card);
    });
    
    console.log('‚úÖ Cartes mises √† jour:', activeRPs.length, 'affich√©es');
}

// Initialisation
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ Initialisation renderer...');
    
    // TEST IMM√âDIAT - V√©rifier si les √©l√©ments existent
    const rpForm = document.getElementById('rpForm');
    const rpName = document.getElementById('rpName');
    const partnerName = document.getElementById('partnerName');
    const turn = document.getElementById('turn');
    
    console.log('üîç V√©rification √©l√©ments DOM:');
    console.log('- rpForm:', !!rpForm);
    console.log('- rpName:', !!rpName);
    console.log('- partnerName:', !!partnerName);
    console.log('- turn:', !!turn);
    
    if (!rpForm) {
        console.error('‚ùå PROBL√àME: Formulaire rpForm non trouv√©!');
        return;
    }
    
    // Gestionnaire formulaire avec DEBUG D√âTAILL√â
    rpForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('üìù üö® FORMULAIRE SOUMIS! üö®');

        // V√©rifier connexion
        console.log('üîê V√©rification connexion utilisateur...');
        console.log('- window.currentUser:', !!window.currentUser);
        console.log('- sessionStorage user_id:', !!sessionStorage.getItem('user_id'));
        
        if (!window.currentUser) {
            console.error('‚ùå Utilisateur non connect√©');
            alert('Veuillez vous connecter pour ajouter un RP');
            return;
        }

        // R√©cup√©rer donn√©es formulaire
        const rpNameValue = document.getElementById('rpName').value.trim();
        const partnerNameValue = document.getElementById('partnerName').value.trim();
        const locationValue = document.getElementById('rpLocation').value.trim();
        const typeValue = document.getElementById('rpType').value.trim();
        const universeValue = document.getElementById('rpUniverse').value.trim();
        const urlValue = document.getElementById('rpUrl').value.trim();
        const turnValue = document.getElementById('turn').value;

        console.log('üìã Donn√©es r√©cup√©r√©es:');
        console.log('- RP:', rpNameValue);
        console.log('- Partenaire:', partnerNameValue);
        console.log('- Tour:', turnValue);

        if (!rpNameValue || !partnerNameValue || !turnValue) {
            console.error('‚ùå Champs requis manquants');
            alert('Veuillez remplir tous les champs requis');
            return;
        }

        const newRP = {
            id: Date.now() + Math.random(),
            rp: rpNameValue,
            partner: partnerNameValue,
            location: locationValue || '',
            type: typeValue || '',
            universe: universeValue || '',
            url: urlValue || '',
            turn: turnValue,
            date: new Date()
        };

        console.log('‚ûï Nouveau RP cr√©√©:', newRP);
        
        // Ajouter √† la liste
        rpList.push(newRP);
        console.log('üìù RP ajout√© √† la liste. Total:', rpList.length);
        
        try {
            console.log('üíæ Tentative sauvegarde...');
            await saveData();
            console.log('‚úÖ Sauvegarde OK');
            
            console.log('üîÑ Mise √† jour affichage...');
            updateActiveCards();
            
            console.log('üßπ Reset formulaire...');
            rpForm.reset();
            
            showNotification(`RP "${rpNameValue}" ajout√© avec succ√®s !`);
            console.log('üéâ SUCC√àS TOTAL!');
            
        } catch (error) {
            console.error('‚ùå ERREUR CRITIQUE:', error);
            rpList.pop(); // Retirer si √©chec
            showNotification('Erreur lors de l\'ajout', 'error');
        }
    });
    
    // Charger donn√©es existantes
    try {
        console.log('üì• Chargement initial...');
        await loadData();
        updateActiveCards();
        console.log('üéâ Initialisation termin√©e avec succ√®s');
    } catch (error) {
        console.error('‚ùå Erreur initialisation:', error);
        updateActiveCards();
    }
});